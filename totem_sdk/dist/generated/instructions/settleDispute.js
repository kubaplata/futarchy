/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { settleDisputeArgsBeet, } from '../types/SettleDisputeArgs';
/**
 * @category Instructions
 * @category SettleDispute
 * @category generated
 */
export const settleDisputeStruct = new beet.BeetArgsStruct([
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', settleDisputeArgsBeet],
], 'SettleDisputeInstructionArgs');
export const settleDisputeInstructionDiscriminator = [
    155, 147, 5, 44, 20, 204, 146, 43,
];
/**
 * Creates a _SettleDispute_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SettleDispute
 * @category generated
 */
export function createSettleDisputeInstruction(accounts, args, programId = new web3.PublicKey('totoRorVC1BCmAMFvxM55t9RjPMsGeTTVdUgGC9AF8g')) {
    var _a;
    const [data] = settleDisputeStruct.serialize(Object.assign({ instructionDiscriminator: settleDisputeInstructionDiscriminator }, args));
    const keys = [
        {
            pubkey: accounts.signer,
            isWritable: true,
            isSigner: true,
        },
        {
            pubkey: accounts.totem,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.dispute,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: (_a = accounts.proposal) !== null && _a !== void 0 ? _a : programId,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.statement,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.totemDao,
            isWritable: false,
            isSigner: false,
        },
    ];
    if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
            keys.push(acc);
        }
    }
    const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data,
    });
    return ix;
}
