/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
type ErrorWithCode = Error & {
    code: number;
};
type MaybeErrorWithCode = ErrorWithCode | null | undefined;
/**
 * ChallengePeriodEnded: 'Challenge period ended. Statement cannot be disputed anymore.'
 *
 * @category Errors
 * @category generated
 */
export declare class ChallengePeriodEndedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CallbackInstructionAccountPubkeyMismatch: 'Invalid public key of an account in callback instruction'
 *
 * @category Errors
 * @category generated
 */
export declare class CallbackInstructionAccountPubkeyMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidCallbackInstructionProgramId: 'Callback instruction includes invalid Program ID'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidCallbackInstructionProgramIdError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CallbackInstructionSignerMismatch: 'Account in callback instruction violates signer constraint'
 *
 * @category Errors
 * @category generated
 */
export declare class CallbackInstructionSignerMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * CallbackInstructionWritableAccountMismatch: 'Account in callback instruction violates writable constraint'
 *
 * @category Errors
 * @category generated
 */
export declare class CallbackInstructionWritableAccountMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidCallbackInstructionData: 'Callback instruction data is invalid'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidCallbackInstructionDataError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ProposalNotFinalised: 'Proposal cannot be settled before finalisation.'
 *
 * @category Errors
 * @category generated
 */
export declare class ProposalNotFinalisedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * DisputeSettled: 'Dispute has been already settled.'
 *
 * @category Errors
 * @category generated
 */
export declare class DisputeSettledError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InstructionMissingProposal: 'Instruction is missing a proposal account.'
 *
 * @category Errors
 * @category generated
 */
export declare class InstructionMissingProposalError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * ChallengePeriodNotEnded: 'Statement cannot be settled before ending challenge period'
 *
 * @category Errors
 * @category generated
 */
export declare class ChallengePeriodNotEndedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * InvalidTreasury: 'Invalid treasury account'
 *
 * @category Errors
 * @category generated
 */
export declare class InvalidTreasuryError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export declare function errorFromCode(code: number): MaybeErrorWithCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
