/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { statusBeet } from '../types/Status';
export const statementDiscriminator = [202, 2, 247, 46, 97, 244, 139, 209];
/**
 * Holds the data for the {@link Statement} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Statement {
    constructor(index, creator, statement, status, disputes, createdAt) {
        this.index = index;
        this.creator = creator;
        this.statement = statement;
        this.status = status;
        this.disputes = disputes;
        this.createdAt = createdAt;
    }
    /**
     * Creates a {@link Statement} instance from the provided args.
     */
    static fromArgs(args) {
        return new Statement(args.index, args.creator, args.statement, args.status, args.disputes, args.createdAt);
    }
    /**
     * Deserializes the {@link Statement} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return Statement.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link Statement} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
            if (accountInfo == null) {
                throw new Error(`Unable to find Statement account at ${address}`);
            }
            return Statement.fromAccountInfo(accountInfo, 0)[0];
        });
    }
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId = new web3.PublicKey('totoRorVC1BCmAMFvxM55t9RjPMsGeTTVdUgGC9AF8g')) {
        return beetSolana.GpaBuilder.fromStruct(programId, statementBeet);
    }
    /**
     * Deserializes the {@link Statement} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return statementBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link Statement} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return statementBeet.serialize(Object.assign({ accountDiscriminator: statementDiscriminator }, this));
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link Statement} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args) {
        const instance = Statement.fromArgs(args);
        return statementBeet.toFixedFromValue(Object.assign({ accountDiscriminator: statementDiscriminator }, instance)).byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link Statement} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __awaiter(this, void 0, void 0, function* () {
            return connection.getMinimumBalanceForRentExemption(Statement.byteSize(args), commitment);
        });
    }
    /**
     * Returns a readable version of {@link Statement} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            index: (() => {
                const x = this.index;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            creator: this.creator.toBase58(),
            statement: this.statement,
            status: this.status.__kind,
            disputes: (() => {
                const x = this.disputes;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            createdAt: (() => {
                const x = this.createdAt;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
        };
    }
}
/**
 * @category Accounts
 * @category generated
 */
export const statementBeet = new beet.FixableBeetStruct([
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['index', beet.u64],
    ['creator', beetSolana.publicKey],
    ['statement', beet.utf8String],
    ['status', statusBeet],
    ['disputes', beet.u64],
    ['createdAt', beet.u64],
], Statement.fromArgs, 'Statement');
