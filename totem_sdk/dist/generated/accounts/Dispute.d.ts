/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
/**
 * Arguments used to create {@link Dispute}
 * @category Accounts
 * @category generated
 */
export type DisputeArgs = {
    statement: web3.PublicKey;
    index: beet.bignum;
    proposal: web3.PublicKey;
};
export declare const disputeDiscriminator: number[];
/**
 * Holds the data for the {@link Dispute} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export declare class Dispute implements DisputeArgs {
    readonly statement: web3.PublicKey;
    readonly index: beet.bignum;
    readonly proposal: web3.PublicKey;
    private constructor();
    /**
     * Creates a {@link Dispute} instance from the provided args.
     */
    static fromArgs(args: DisputeArgs): Dispute;
    /**
     * Deserializes the {@link Dispute} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset?: number): [Dispute, number];
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link Dispute} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection: web3.Connection, address: web3.PublicKey, commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig): Promise<Dispute>;
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId?: web3.PublicKey): beetSolana.GpaBuilder<{
        accountDiscriminator: any;
        statement: any;
        index: any;
        proposal: any;
    }>;
    /**
     * Deserializes the {@link Dispute} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset?: number): [Dispute, number];
    /**
     * Serializes the {@link Dispute} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number];
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link Dispute}
     */
    static get byteSize(): number;
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link Dispute} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(connection: web3.Connection, commitment?: web3.Commitment): Promise<number>;
    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link Dispute} data.
     */
    static hasCorrectByteSize(buf: Buffer, offset?: number): boolean;
    /**
     * Returns a readable version of {@link Dispute} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty(): {
        statement: string;
        index: number | {
            toNumber: () => number;
        };
        proposal: string;
    };
}
/**
 * @category Accounts
 * @category generated
 */
export declare const disputeBeet: beet.BeetStruct<Dispute, DisputeArgs & {
    accountDiscriminator: number[];
}>;
