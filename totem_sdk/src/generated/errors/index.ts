/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * ChallengePeriodEnded: 'Challenge period ended. Statement cannot be disputed anymore.'
 *
 * @category Errors
 * @category generated
 */
export class ChallengePeriodEndedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'ChallengePeriodEnded'
  constructor() {
    super('Challenge period ended. Statement cannot be disputed anymore.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ChallengePeriodEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new ChallengePeriodEndedError())
createErrorFromNameLookup.set(
  'ChallengePeriodEnded',
  () => new ChallengePeriodEndedError()
)

/**
 * CallbackInstructionAccountPubkeyMismatch: 'Invalid public key of an account in callback instruction'
 *
 * @category Errors
 * @category generated
 */
export class CallbackInstructionAccountPubkeyMismatchError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'CallbackInstructionAccountPubkeyMismatch'
  constructor() {
    super('Invalid public key of an account in callback instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        CallbackInstructionAccountPubkeyMismatchError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x1771,
  () => new CallbackInstructionAccountPubkeyMismatchError()
)
createErrorFromNameLookup.set(
  'CallbackInstructionAccountPubkeyMismatch',
  () => new CallbackInstructionAccountPubkeyMismatchError()
)

/**
 * InvalidCallbackInstructionProgramId: 'Callback instruction includes invalid Program ID'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCallbackInstructionProgramIdError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidCallbackInstructionProgramId'
  constructor() {
    super('Callback instruction includes invalid Program ID')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCallbackInstructionProgramIdError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1772,
  () => new InvalidCallbackInstructionProgramIdError()
)
createErrorFromNameLookup.set(
  'InvalidCallbackInstructionProgramId',
  () => new InvalidCallbackInstructionProgramIdError()
)

/**
 * CallbackInstructionSignerMismatch: 'Account in callback instruction violates signer constraint'
 *
 * @category Errors
 * @category generated
 */
export class CallbackInstructionSignerMismatchError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'CallbackInstructionSignerMismatch'
  constructor() {
    super('Account in callback instruction violates signer constraint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CallbackInstructionSignerMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1773,
  () => new CallbackInstructionSignerMismatchError()
)
createErrorFromNameLookup.set(
  'CallbackInstructionSignerMismatch',
  () => new CallbackInstructionSignerMismatchError()
)

/**
 * CallbackInstructionWritableAccountMismatch: 'Account in callback instruction violates writable constraint'
 *
 * @category Errors
 * @category generated
 */
export class CallbackInstructionWritableAccountMismatchError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'CallbackInstructionWritableAccountMismatch'
  constructor() {
    super('Account in callback instruction violates writable constraint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        CallbackInstructionWritableAccountMismatchError
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x1774,
  () => new CallbackInstructionWritableAccountMismatchError()
)
createErrorFromNameLookup.set(
  'CallbackInstructionWritableAccountMismatch',
  () => new CallbackInstructionWritableAccountMismatchError()
)

/**
 * InvalidCallbackInstructionData: 'Callback instruction data is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCallbackInstructionDataError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidCallbackInstructionData'
  constructor() {
    super('Callback instruction data is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCallbackInstructionDataError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1775,
  () => new InvalidCallbackInstructionDataError()
)
createErrorFromNameLookup.set(
  'InvalidCallbackInstructionData',
  () => new InvalidCallbackInstructionDataError()
)

/**
 * ProposalNotFinalised: 'Proposal cannot be settled before finalisation.'
 *
 * @category Errors
 * @category generated
 */
export class ProposalNotFinalisedError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'ProposalNotFinalised'
  constructor() {
    super('Proposal cannot be settled before finalisation.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProposalNotFinalisedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new ProposalNotFinalisedError())
createErrorFromNameLookup.set(
  'ProposalNotFinalised',
  () => new ProposalNotFinalisedError()
)

/**
 * DisputeSettled: 'Dispute has been already settled.'
 *
 * @category Errors
 * @category generated
 */
export class DisputeSettledError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'DisputeSettled'
  constructor() {
    super('Dispute has been already settled.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DisputeSettledError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new DisputeSettledError())
createErrorFromNameLookup.set('DisputeSettled', () => new DisputeSettledError())

/**
 * InstructionMissingProposal: 'Instruction is missing a proposal account.'
 *
 * @category Errors
 * @category generated
 */
export class InstructionMissingProposalError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InstructionMissingProposal'
  constructor() {
    super('Instruction is missing a proposal account.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InstructionMissingProposalError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1778,
  () => new InstructionMissingProposalError()
)
createErrorFromNameLookup.set(
  'InstructionMissingProposal',
  () => new InstructionMissingProposalError()
)

/**
 * ChallengePeriodNotEnded: 'Statement cannot be settled before ending challenge period'
 *
 * @category Errors
 * @category generated
 */
export class ChallengePeriodNotEndedError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'ChallengePeriodNotEnded'
  constructor() {
    super('Statement cannot be settled before ending challenge period')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ChallengePeriodNotEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new ChallengePeriodNotEndedError())
createErrorFromNameLookup.set(
  'ChallengePeriodNotEnded',
  () => new ChallengePeriodNotEndedError()
)

/**
 * InvalidTreasury: 'Invalid treasury account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTreasuryError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'InvalidTreasury'
  constructor() {
    super('Invalid treasury account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTreasuryError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new InvalidTreasuryError())
createErrorFromNameLookup.set(
  'InvalidTreasury',
  () => new InvalidTreasuryError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
