/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  RequestStatementArgs,
  requestStatementArgsBeet,
} from '../types/RequestStatementArgs'

/**
 * @category Instructions
 * @category RequestStatement
 * @category generated
 */
export type RequestStatementInstructionArgs = {
  args: RequestStatementArgs
}
/**
 * @category Instructions
 * @category RequestStatement
 * @category generated
 */
export const requestStatementStruct = new beet.FixableBeetArgsStruct<
  RequestStatementInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', requestStatementArgsBeet],
  ],
  'RequestStatementInstructionArgs'
)
/**
 * Accounts required by the _requestStatement_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] totem
 * @property [_writable_] request
 * @property [] feeCollector
 * @category Instructions
 * @category RequestStatement
 * @category generated
 */
export type RequestStatementInstructionAccounts = {
  signer: web3.PublicKey
  totem: web3.PublicKey
  request: web3.PublicKey
  feeCollector: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const requestStatementInstructionDiscriminator = [
  41, 19, 241, 103, 186, 191, 176, 79,
]

/**
 * Creates a _RequestStatement_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RequestStatement
 * @category generated
 */
export function createRequestStatementInstruction(
  accounts: RequestStatementInstructionAccounts,
  args: RequestStatementInstructionArgs,
  programId = new web3.PublicKey('totoRorVC1BCmAMFvxM55t9RjPMsGeTTVdUgGC9AF8g')
) {
  const [data] = requestStatementStruct.serialize({
    instructionDiscriminator: requestStatementInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.totem,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.request,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.feeCollector,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
