/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link Status} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link Status} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type StatusRecord = {
  Proposed: void /* scalar variant */
  Disputed: void /* scalar variant */
  Settled: { fields: [boolean] }
}

/**
 * Union type respresenting the Status data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isStatus*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type Status = beet.DataEnumKeyAsKind<StatusRecord>

export const isStatusProposed = (
  x: Status
): x is Status & { __kind: 'Proposed' } => x.__kind === 'Proposed'
export const isStatusDisputed = (
  x: Status
): x is Status & { __kind: 'Disputed' } => x.__kind === 'Disputed'
export const isStatusSettled = (
  x: Status
): x is Status & { __kind: 'Settled' } => x.__kind === 'Settled'

/**
 * @category userTypes
 * @category generated
 */
export const statusBeet = beet.dataEnum<StatusRecord>([
  ['Proposed', beet.unit],
  ['Disputed', beet.unit],
  [
    'Settled',
    new beet.BeetArgsStruct<StatusRecord['Settled']>(
      [['fields', beet.fixedSizeTuple([beet.bool])]],
      'StatusRecord["Settled"]'
    ),
  ],
]) as beet.FixableBeet<Status, Status>
